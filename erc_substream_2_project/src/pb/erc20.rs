// This file is generated by rust-protobuf 3.7.2. Do not edit
// .proto file is parsed by protoc --rs_out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `erc20.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_2;

// @@protoc_insertion_point(message:erc20.types.v1.TransferEvents)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct TransferEvents {
    // message fields
    // @@protoc_insertion_point(field:erc20.types.v1.TransferEvents.transfers)
    pub transfers: ::std::vec::Vec<TransferEvent>,
    // special fields
    // @@protoc_insertion_point(special_field:erc20.types.v1.TransferEvents.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TransferEvents {
    fn default() -> &'a TransferEvents {
        <TransferEvents as ::protobuf::Message>::default_instance()
    }
}

impl TransferEvents {
    pub fn new() -> TransferEvents {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "transfers",
            |m: &TransferEvents| { &m.transfers },
            |m: &mut TransferEvents| { &mut m.transfers },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TransferEvents>(
            "TransferEvents",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TransferEvents {
    const NAME: &'static str = "TransferEvents";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.transfers.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.transfers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.transfers {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TransferEvents {
        TransferEvents::new()
    }

    fn clear(&mut self) {
        self.transfers.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TransferEvents {
        static instance: TransferEvents = TransferEvents {
            transfers: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TransferEvents {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TransferEvents").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TransferEvents {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransferEvents {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:erc20.types.v1.TransferEvent)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct TransferEvent {
    // message fields
    ///  contract address
    // @@protoc_insertion_point(field:erc20.types.v1.TransferEvent.contract)
    pub contract: ::std::string::String,
    ///  event payload
    // @@protoc_insertion_point(field:erc20.types.v1.TransferEvent.from)
    pub from: ::std::string::String,
    // @@protoc_insertion_point(field:erc20.types.v1.TransferEvent.to)
    pub to: ::std::string::String,
    // @@protoc_insertion_point(field:erc20.types.v1.TransferEvent.value)
    pub value: ::std::string::String,
    ///  trace information
    // @@protoc_insertion_point(field:erc20.types.v1.TransferEvent.tx_id)
    pub tx_id: ::std::string::String,
    // @@protoc_insertion_point(field:erc20.types.v1.TransferEvent.block_index)
    pub block_index: u64,
    // @@protoc_insertion_point(field:erc20.types.v1.TransferEvent.index)
    pub index: u32,
    // special fields
    // @@protoc_insertion_point(special_field:erc20.types.v1.TransferEvent.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TransferEvent {
    fn default() -> &'a TransferEvent {
        <TransferEvent as ::protobuf::Message>::default_instance()
    }
}

impl TransferEvent {
    pub fn new() -> TransferEvent {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "contract",
            |m: &TransferEvent| { &m.contract },
            |m: &mut TransferEvent| { &mut m.contract },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "from",
            |m: &TransferEvent| { &m.from },
            |m: &mut TransferEvent| { &mut m.from },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "to",
            |m: &TransferEvent| { &m.to },
            |m: &mut TransferEvent| { &mut m.to },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value",
            |m: &TransferEvent| { &m.value },
            |m: &mut TransferEvent| { &mut m.value },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tx_id",
            |m: &TransferEvent| { &m.tx_id },
            |m: &mut TransferEvent| { &mut m.tx_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "block_index",
            |m: &TransferEvent| { &m.block_index },
            |m: &mut TransferEvent| { &mut m.block_index },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "index",
            |m: &TransferEvent| { &m.index },
            |m: &mut TransferEvent| { &mut m.index },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TransferEvent>(
            "TransferEvent",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TransferEvent {
    const NAME: &'static str = "TransferEvent";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.contract = is.read_string()?;
                },
                18 => {
                    self.from = is.read_string()?;
                },
                26 => {
                    self.to = is.read_string()?;
                },
                34 => {
                    self.value = is.read_string()?;
                },
                42 => {
                    self.tx_id = is.read_string()?;
                },
                48 => {
                    self.block_index = is.read_uint64()?;
                },
                56 => {
                    self.index = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.contract.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.contract);
        }
        if !self.from.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.from);
        }
        if !self.to.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.to);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.value);
        }
        if !self.tx_id.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.tx_id);
        }
        if self.block_index != 0 {
            my_size += ::protobuf::rt::uint64_size(6, self.block_index);
        }
        if self.index != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.index);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.contract.is_empty() {
            os.write_string(1, &self.contract)?;
        }
        if !self.from.is_empty() {
            os.write_string(2, &self.from)?;
        }
        if !self.to.is_empty() {
            os.write_string(3, &self.to)?;
        }
        if !self.value.is_empty() {
            os.write_string(4, &self.value)?;
        }
        if !self.tx_id.is_empty() {
            os.write_string(5, &self.tx_id)?;
        }
        if self.block_index != 0 {
            os.write_uint64(6, self.block_index)?;
        }
        if self.index != 0 {
            os.write_uint32(7, self.index)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TransferEvent {
        TransferEvent::new()
    }

    fn clear(&mut self) {
        self.contract.clear();
        self.from.clear();
        self.to.clear();
        self.value.clear();
        self.tx_id.clear();
        self.block_index = 0;
        self.index = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TransferEvent {
        static instance: TransferEvent = TransferEvent {
            contract: ::std::string::String::new(),
            from: ::std::string::String::new(),
            to: ::std::string::String::new(),
            value: ::std::string::String::new(),
            tx_id: ::std::string::String::new(),
            block_index: 0,
            index: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TransferEvent {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TransferEvent").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TransferEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransferEvent {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0berc20.proto\x12\x0eerc20.types.v1\"M\n\x0eTransferEvents\x12;\n\tt\
    ransfers\x18\x01\x20\x03(\x0b2\x1d.erc20.types.v1.TransferEventR\ttransf\
    ers\"\xb1\x01\n\rTransferEvent\x12\x1a\n\x08contract\x18\x01\x20\x01(\tR\
    \x08contract\x12\x12\n\x04from\x18\x02\x20\x01(\tR\x04from\x12\x0e\n\x02\
    to\x18\x03\x20\x01(\tR\x02to\x12\x14\n\x05value\x18\x04\x20\x01(\tR\x05v\
    alue\x12\x13\n\x05tx_id\x18\x05\x20\x01(\tR\x04txId\x12\x1f\n\x0bblock_i\
    ndex\x18\x06\x20\x01(\x04R\nblockIndex\x12\x14\n\x05index\x18\x07\x20\
    \x01(\rR\x05indexJ\xcc\x04\n\x06\x12\x04\0\0\x15\x01\n\x08\n\x01\x0c\x12\
    \x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x17\n\n\n\x02\x04\0\x12\x04\
    \x04\0\x06\x01\n\n\n\x03\x04\0\x01\x12\x03\x04\x08\x16\n\x0b\n\x04\x04\0\
    \x02\0\x12\x03\x05\x02'\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03\x05\x02\n\n\
    \x0c\n\x05\x04\0\x02\0\x06\x12\x03\x05\x0b\x18\n\x0c\n\x05\x04\0\x02\0\
    \x01\x12\x03\x05\x19\"\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x05%&\n\n\n\
    \x02\x04\x01\x12\x04\x08\0\x15\x01\n\n\n\x03\x04\x01\x01\x12\x03\x08\x08\
    \x15\n\x1f\n\x04\x04\x01\x02\0\x12\x03\n\x02\x16\x1a\x12\x20contract\x20\
    address\n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\n\x02\x08\n\x0c\n\x05\
    \x04\x01\x02\0\x01\x12\x03\n\t\x11\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\
    \n\x14\x15\n\x1c\n\x04\x04\x01\x02\x01\x12\x03\r\x02\x12\x1a\x0f\x20even\
    t\x20payload\n\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\r\x02\x08\n\x0c\n\
    \x05\x04\x01\x02\x01\x01\x12\x03\r\t\r\n\x0c\n\x05\x04\x01\x02\x01\x03\
    \x12\x03\r\x10\x11\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\x0e\x02\x10\n\x0c\
    \n\x05\x04\x01\x02\x02\x05\x12\x03\x0e\x02\x08\n\x0c\n\x05\x04\x01\x02\
    \x02\x01\x12\x03\x0e\t\x0b\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\x0e\
    \x0e\x0f\n\x0b\n\x04\x04\x01\x02\x03\x12\x03\x0f\x02\x13\n\x0c\n\x05\x04\
    \x01\x02\x03\x05\x12\x03\x0f\x02\x08\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\
    \x03\x0f\t\x0e\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03\x0f\x11\x12\n\x20\
    \n\x04\x04\x01\x02\x04\x12\x03\x12\x02\x13\x1a\x13\x20trace\x20informati\
    on\n\n\x0c\n\x05\x04\x01\x02\x04\x05\x12\x03\x12\x02\x08\n\x0c\n\x05\x04\
    \x01\x02\x04\x01\x12\x03\x12\t\x0e\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\
    \x03\x12\x11\x12\n\x0b\n\x04\x04\x01\x02\x05\x12\x03\x13\x02\x19\n\x0c\n\
    \x05\x04\x01\x02\x05\x05\x12\x03\x13\x02\x08\n\x0c\n\x05\x04\x01\x02\x05\
    \x01\x12\x03\x13\t\x14\n\x0c\n\x05\x04\x01\x02\x05\x03\x12\x03\x13\x17\
    \x18\n\x0b\n\x04\x04\x01\x02\x06\x12\x03\x14\x02\x11\n\x0c\n\x05\x04\x01\
    \x02\x06\x05\x12\x03\x14\x02\x08\n\x0c\n\x05\x04\x01\x02\x06\x01\x12\x03\
    \x14\t\x0e\n\x0c\n\x05\x04\x01\x02\x06\x03\x12\x03\x14\x0f\x10b\x06proto\
    3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(TransferEvents::generated_message_descriptor_data());
            messages.push(TransferEvent::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
